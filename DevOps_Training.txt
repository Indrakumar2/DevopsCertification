Linux Refresher:

Linux was developed by LinusTorvads in 1991

Components:

Bootloader---> A software to manage the booting process of a computer,responsible for loading the operating system in the memory.

Kernel----> it manages the CPU,Memory and Peripheral Devices,It acts as a core interface to communicate b/w the two managing resources.
            effeciently

init System----->exceuted by the linux kernel after the early stages  of bootup completion by the boot loader, it is a subsystem that bootstraps the user
                 space and is charged with controlling the daemons.

Daemons----->These are the background services that either start up during the boot or after logging in to the desktop.
             These Daemons are responsible for managing many parts of the system like, log information, watching for the devices that are inserted or removed & managing the user login.


Graphical Server----->It is refered to as X-server. It render images and shapes on a computet monitor.

Desktop Environment----->The component with which the users interact the most and includes built-in applications.

Applications-----> Desktop environment do not offer the full array of apps, but these applications can installed as per the requirements


Linux Distributions:

it is also refer to as Distros is the term to describe the linux versions.

Ubuntu,Debian, Centos, Fedora, linux mint, opensuse, Archlinux, Elementry os.  


Linux in Devops:
The goal of the Devops is to deliver the software at the faster pace means, building on existing insfrasturcture


Faster Development-------Open Source-------Flexible---------------Scalable

Linux Administration is about managing system operations such as,
----->File Backups and Restorations
------>Disaster Recovery
------>New System Builds
------>Hardware, Software & User Maintainance
------>File System housekeeping
------>Application Installation and Configuartion






Devops overview
Devops is the agile relationship b/w Development and IT operations
Developement+Operations
managing entire Application


                  DEV                 +                 OPS
plan--->Create---->verify---->package---->Release--->configure---->Monitor


Traditional Software Development Approach:

---->Waterfall Model
-----> Agile Model


Waterfall Model
---->It uses a linear and Sequential  Approach for software Development

Stages:

---->Requirement Analysis

                     ------->System Design 
         
                                       ------>Implementation 

                                                        ------->Testing 

                                                                     -------->Deployment
 
                                                                                      ------->Maintainance
Pros:                               Cons:
Easy to use                         Risky & Uncertain
cost Effective                      Not suitable for Complex Projects
Time saving                         Final Product Available only at the end
Easy testing                        not suitable for projects with the changing Requirements
suitable for small Projects         Difficult to make changes in the testing phase
Managerial Control




Agile model:

it is a combination of iterative and incremental process models that focuses process adaptibility and customer satisfaction
by rapid delivery of the working software product.

It breaks the product into small incremental builds,these builds are provided in iterations

working:
----->Product Backlog : it is pretty much all the things that the business wants to get from the software development team
                        Product backlog may have an infinite number of items, but need to decide what we are going to work on in a given period of software development.

------>Sprint Backlog : The above phenomenon is known as Sprint Planning, Leaders from the Software Development team would look at the backlog and Decide what will be
                         implemented in a given sprint.

A Passing Sprint means that the items from the product backlog that's been intoduced in the sprint have been created, shipped and Deployed

A failing Sprint is one were not all works been done

irrespective of the sprints pass or fail most companies have reterespective on all sprints were things that worked and things that didn't work are dicussed  along with figuring out
to improve the process

the Scrum team will do plan, Develop, test during the sprint that usually b/w 4-weeks, the scrum team will meet daily, disscusing in the progress of the project


Pros:                                                     Cons
Dynamic Response to requirements                          poor Documentation
Cost Effective                                            Difficult to estimate time and effort for complex projects
Superior Quality Product                                  Risky due to the ever evolving characteristics
Direct Communication b/w the stake holders                Difficult to predict the expected results when requirements are unclear
Best suited for large and long term projects
Minimum Resource Requirement




Relationship b/w Agile and DevOps

using automation tools
Improve collaboration b/w the teams
Create an automated deployment process that moves code from the repository 



DASA DevOPS Principle:

The DevOps Agile Skills Association Defines Certain principle for Devops

Customer-Centric Action

Create with the end in mind

End to End Responsibility

Cross-Functional Autonomous teams

Continous Improvement

Automate Everything you can



Lifecycle

---> Continous developement[Manifests planning and coding, The scope of the project is determined during the planning and developers bulid the code]
               


              ---> Continous Testing[in this phase teh code has been rigoursly tested for bugs,Here entire testing is automated, Jenkins assist in conducting automation of test procedure so that it saves a lot of time]
                            


                              -----> Continous integration[it's the essential phase of DevOps, which deals with the software development. Frequent changes are made to the code
                                                                Building code not only involves complilation but it also includes, UNIT TESTING, INTEGARTION TESTING,CODE REVIEW, CODE PACKAGING]
 


                                          
                                         ------>Continous Deployment[the new code is deployed frequently and  the configuration management tools are required to achive
                                                                            Contiainerization also plays a pivtol role in the deployment process
                                                                            These tools helps to maintain consistency throughout ---->development-----staging----testing----production]




                                                            ------> Continous Monitoring[it includes all operational aspects,it maintains the security and availabilty of the service]




Tool Categories:

SCM, Testing, Software Build,Integartion, CMT and Deployment, Monitoring, Continerization


SCM:
Tracking source Code Changes and history of changes in the code base, and helps resolve conflicts when merging updates from multiple contributors
Git,Github

Software Build:
Maven

Testing:

Selinium

Integration

Jenkins

CMT and Deployment:
Continous Dep & Operations

Codeship, AWSCode Deploy, Terraform , Ansible ,Chef, Puppet, saltstack

Monitoring:

Nagios and Splunk,Amazon cloudwatch, grafana, datadog

Containerization:
It is defined as the form of operating system virtualization through which applications are run in isolated user spaces called containers, all using the same shared OS
Docker and Kubernetes

Benifits of Devops:

Assured Rapid Deployment
Balanced Working Environment
Drastic Improvement over quality
Repetative task is Automated
Proactive growth of business
Continous Delivery
Minimal Cost of production
Higher Productivity



DevSecOps:

for security concerns instead of retrofitting the security into the build,it tries to integrate the management of securtiy throughout the development process.

DevSecOps Benefits:
Rapid Cost-Effective Software Delivery
Repeatable and Adaptive Process
improved,proactive Security
Accelerated security vulnerbility patching
automation compatible with modern development




DevOps On Cloud:
Features of cloud ---> 
 
scalability
Elasticity
Availability
Reliability
Manageability
Interoperability
Accessibility
Portability
Perfromance
Optimization


the Cloud service can be categorized in three ways:

Infrastructure as Service (IaaS)--->It is an Instant computing infrastructure service that provides virtualized computing resources over internet.

Platform as Service (PaaS)----->It is a method were users are allowed to build, test, debug, deploy, host, and update their applications in the same environment.

Software as Service (SaaS)---->It is a method of delivering the applications as a service,so that users are free from complex software and hardware management.



Version Control System:

If a project consist of Technical concepts, Collabration b/w different team members, Frequent changes.

A Version control system allows users to keep track of the changes in the software developement projects and enables them to collaborate on thode projecys

Purpose:

Records changes to set of files

Track every individual change by each contributor

Supports a developers preference and is felxible to use

Faclitates a smooth and continous flow of changes to the code


VCS Stremline in a project:

Allows easy issue tracking

provides a complete long term change history of every file with large file storage

Facilitates easy branching and merging 

Helps in tracking each change made to the software

Tracks the status of each step in the pipeline

Allows Developers to tell each other about different changes pushed to a github repository

Gives real time insights into the codebase 

Offers unlimited free private and Public repositories


Benifits:

Collabrate

Storing versions 

Restoring previous versions 

Understand what happend 

Back up


Types of VCS

Local Version control System: It maintains the track on files within the local system

                               It is very common and simple approch
                                
                               This method very error prone, which means the chances of accidentally writting to the wrong file is higher



Centralised Version Control System: It uses Centralized server to store the files and all the changes in the files are also tracked under the centalized server

                                    This centralized server also includes all the information of version files and list of clients that checkout files from that central place

Distributed Version Control System: It moves from the client-server approach of the centralized version control system to a peer to peer approach
                                     
                                    The clients can completely clone the repository including its full history

                                    If any server dies any of the client repository can be copied onto the server immediately 



Tools: GitHub, Gitlab, Apache Subversion and Mercurial


Overview of git:

It is type of DVCS

Git allows multiple developers to work together and supports the non-linear developement because of the parallel branches

Git is a software that runs locally the files and their history are stored in the computer

Online hosts are available to store the copy of the files and their revision history

Purpose:

It tracks changes in the source code

User distributed version control tool for source code management

Allows multiple developers to work together

Supports non-linear developement because of its several parallel branches

Benefits:

Has flexible environment 

Facilitates branching and merging 

keeps the files in the secure server

creates and manage remote repositories

Git Repository:

A git repository contains all of the projects files and each file revision history, this can be used for discussion and manage the projects work with in the repository


Charcteristics :

The users can have access to the files in the local repository, Whether it's a single or multiple files 

The user can view the public repository by usingt the url of the particular repository

Each repo belongs to a team or a user

    if in the case of User account the user owns the repository
    if in the case of team the team owns it

The repository owner is the only person who can delete the repository

If it is belongs to a team only admin can delete the repository

A code project consists of multiple repositories across multiple accounts, but also can be a single repository from a single account
 
Each repository has 2GB size limit , but it is recommended  to keep the repository to no longer more than 1GB




Life cycle of git:

Repository ------> clone Operation ----->working copy-----> Modify the working copy(Upadate the other developer files in the working copy[status differnce operation])------>review the changes (Commit and push changes)
------>Commit changes [push operation][amend and push operation]------>Fix Mistakes [Push the changes]


Git stages 


    Committed                      modified				staged   [Each state relates to a specific git section]


    Working Directory              staging area                         git directory



Working Directory: it is local physical directory were changes can be done to the files

Staging area:  it is the place were the git keeps a reference of all modifications to be sent to the next commit

Gir directory: it is the repository that stores all files in a compressed form
  

Untracked files resides only in the workiing directory ie, they don't reflect in the git directory

Modified files resides in both working directory and git directory they have diffrent versions ie, the working directory files were changed, but those changes weren't sent to the staging area

Staged files resides in the both working directory and git directory if they are existing files being changed or they don't reside in the git directory, ifthey are new file is being added to the respository for the first time

Commited files resides on the both working directory and gir directory with the exact same version.








CI/CD With Jenkins:

Prerequisites-----> Automated bulid tests, Package and deploy operations
                    Quick Pipeline Execution 
                    Quick failure recovery
                    Zero-Downtime deployment
                    Trunk-based Developement 


Jenkins:

Written entirely in java

Benefits: 
Its free

It is  highly portable application

It can be easily installed and configured as per the required needs

It has a vry rich plugin library and global community support

It can be integrated with limitless other applications and tools.


Process of CI in Jenkins:

All the commits are built-------Jenkins CI will check for the builds-------Once the build id fine, the executable code is ready for deployment--------Otherwise the team
of developers who will commit changess at regular intervals are notified



Job Types in jenkins:

Freestyle Project
Maven Project
External Job
Multi-Configuration project
Pipeline
Folder
Github organization
Multibranch Pipeline

Poll SCM:

It periodically builds SCM, It involves checking the versions at regular intervals for any changes that have been commited 


Webhooks:

It helps to transfer realtime data from one application to another and provide the application a way of consuming new event data from an endpoint.

Bulid Periodically:

It builds the project periodically even if nothing has changed. It might have tests that shpuld be run periodically or a DB Clean up jenkins job or any other jenkins job.


Scheduling Jenkins Job:

Scheduled builds simply trigger your bulid job at regular intervals

This statergy can be used for regular night bulids

They can be done with something as simple as a unix cronjob

continous integration requires faster feedback than scheduled bulids

scheduled builds can be used for long running build jobs, where quick feedback is less critical


Syntax:

It uses cron style syntax for scheduling the jobs

              *                  *                   *                              *                       *      
 
         minutes(0-59)  ----  hour(0-23) ----- Day of the Month(1-31)------- month(b/w 1-12) ------ day of the week (0-7 ,where 0&7 are sunday)  



 
notations: 
             '*' --------> represents all possible values for a field  ------- means  once a minute
   
              'M-N' -------> Defines the ranges --------- 1-5 in the DOW field would mean monday to friday

               '/' -------> Defines skips through the ranges ------- */15 in the MINUTE field would mean every 15 minutes

               Comma separated List -------> indicates a list of  valid values ------- 15,45 in the minute field would means at 15 and 45 minutes past evry hour

               Shorthand values                                                  -------- @yearly, @weekly, @Daily, @annualy, @daily, @midnight, and @hourly



Bulid Tools:

Apache ANT & MAVEN

Benefits: 

Easy Configuration 

Easy Support 

Easy Integartion


Maven:

Maven is the bulid tool for managing software dependencies and life cycles.It automatically pulls code from a repository, compiles and packages it, and prepares it for 
the next stage of developement

Tasks:
It can easily create a project 

It is consistent across all the projects

It can connect a project to a source control system

It has the ability to handle muiltiple projects simultaneously

It follows a Standard stratergy


Pros:

It can automatically add all of the project's dependencies by reading a pom file

It can convert a project to war file format easily

It makes it simple to start a project in a variety of contexts and it eliminates the need to manage the dependencies, builds and processing

Cons:

Maven Must be installed on the system before it can be used 

Maven will not be able to add an existing dependency if the maven code for it is not available


Continous integration with maven:
Tutorial need to be done



  

          
































