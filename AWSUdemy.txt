AWS cloud History:

Lauched in2002 internally in amazon.com 

Then amazon launched its first aws service publically SQS in 2004

In 2006 they expanded their services publically with SQS, S3 and EC2

2007 they launched in Europe.

and they expanded their services all over globe and became the leader in cloud Providers.

In 2019 it generated over 35billion annual revenue, accounting 47% of the market in 2019

AWS Use Cases:

It enabels to build spophiscated, scalable application.

They are applicable to diverse set if industries.

It includes, enterpriseIT, Backup & storage, Big Data analytics.

Webhosting, creating backend for Mobile & SocialApps

We can run entire gamnig servers running in cloud.

AWS Global Infrastructure:

It has: AWS Regions, AWS Availability zones, AWS Data Centers, AWS Edge Locations/ Points of Presence.

AWS Regions: 

AWS has Regions all around the world.

Names can be us-east-1, eu-west-3...

A Region is a cluster of datacenters

Most AWS services are region based, so when we are using a service it will be linked and scoped in specific region,
that means when we are using a service in one region and we try it use it another region, it will like new time of using that service.

How to Choose an AWS Region?

If you need to launch a new application where should you do it?

Factors need to be considered while choosing a region:

Compliance with data goverance and legal requirements: Data never leaves a region without your explicit permission.

Proximity to customers: reduced latency.(user numbers)

Availabily of services with a Region: new services and new features aren't available in every region need to make sure before deploying the application.

Pricing: Pricing Varies region to region and is transperent in the service pricing stage.

AWS Availablity Zones

It will be inside a Region

Each Region has many availability zones(min3, max6)

For example, in sydney there are three availability zones, each availability zones is one or more discrete data centers with 
redundant power, networking and connectivity.

They are separate from each other, so that they are isolated from diasters, suppose if something happens to one of the AZ 
we know that is designed not to cascade to other AZs

They are connected with high bandwidh, ultra-low latency networking and all linked together forms a AWS region.

AWS Points of Presence(Edge Locations):

Amazon has 400+ points of presence(400+ edge locations & 10+ Regional caches) in 90+ cities across 40+ countries.

With this it can deliver the contents to the end users with lower latency as possible.

AWS Global services: 

IAM
Route 53 (DNS services)
CloudFront(Content Delivery Network)
WAF(Web application Firewall)

Most AWS Services are Region Scoped:

EC2
Elastic Beanstalk(Platform as a Service)
Lambda(function as service)
Rekongnition(software as service)

To know a service that is available in the region or not we can use Region Table.


IAM: Identity Access Management, GS

Root account will be created by default and once created we should not use that account or even share it, we can create other accounts 
from that root account.

For that we can create Users. These are the people within organization and can be grouped.

Users are people within your organization can be grouped

Groups can only contain users not other groups.

Some users don't have to belong to a single group, he/she can belong to multiple groups.

A user who is not belong to a group is not a best practice but something we can do it in AWS.

Also, a user can belong to mutiple groups.

Why we create users and groups?

In order to use the AWS account we need give the other users Permissions.

Users or Groups can be assigned JSON documents called policies(an IAM Policy),

These Policies define the permissions to the users with which can users can access service in AWS.

In AWS we can apply the least Privilege Principle: so we don't give more permissons than a user needs.


IAM USER Creation: IAM USER with adminstrator access indra pass: Helios@123

IAM Policy Inheritance:

If a user is not belong to a group, then that user can be attached to a policy called Inline policy
which only attached to the user.

IAM Policies Structure:
It consists of a version number Version: policy language version, always include "2012-10-17"

Eg:  

   {
     "Version": "2012-10-27", --------->(Policy Version Number)
     "id": "S3-account-permissions", ------->(id is identifier for the policy which is optional)
     "statement": [    ----------->(it can be one or multiple parts and it consists of,
         {
            "sid": "1", ------>(an identifier for the statement)
            "Effect": "Allow", ----->(this defines the statement allows or denies access to certain API)
            "Principal": { -------->(it defines which accounts/users/role the policy will be applied to..)
                 "AWS": [arn:aws:iam::123456789012:root"]---->(root Account)
            },
             "Action":[ -----> (it defines list of api calls that will be allowed either denied based on the effect )
                  "s3:getobject",
                  "s3:putobject"
    
                  ]
                  "Resource": ["arn:aws:s3":::mybucket/*"] ---->(it defines the list of resources, to which the policy will be applied to...)
               }
             ]
           }

added to this there is other attributes called "Condition": to which when the statement should be applied or not.

IAM we can create a User, User Groups, policies...

if we are creating policies we can attach the created policy to the a users or group using visual editor or json editor.

IAM - PASSWORD POLICY:

It ensures the protection of users and groups

Here we are having two defence mechanisms:
1. "password policy", because stronger the password more will be the account protection.

*In AWS we can setup a password policy:

  Set a minimum password length.
  
2.Require Specific character types: including uppercase letters, lowercase letters, numbers, non-alphanumeric characters.

3. Allow all IAM users to change their own passwords.
4. Require users to change their password after some time(Password expiration)
5.Prevent Password reuse.

The Second Defence Mechanism is the MFA (Multifactor Authentication Access):

Users have access to your account and can possibly change configurations or delete resources in your AWS account.

We need to protect atleast the ROOT account and all IAM users.

MFA is a comnbination of password that users knows and a security device that user owns.

Benifit of MFA is even if a password is stolen or hacked, the account is not compromised.

MFA Devices options in aws:

Virtual MFA device(Support for multiple tokens on single device)
eg: Google authenticator(Phone only), Authy (Multidevice) 

With Authy we can have our root account, the IAM user and another account and another IAM users, we can
have many users as we want on our Virtual MFA.

Universal 2nd Factor(U2F) security key:

This a second method of using MFA and it is a physical device,

Eg: A yubikey by Yubico which is 3rd party to AWS

It supports for multiple root and IAM users using a single security key.

Other options: Hardware key fob MFA device(by gemalto).
               Hardware key fob MFA device for AWS GovCloud (US)(by surepassID)

How users can access AWS?

To access AWS we have three options:

   AWS management console (Protected by Password  MFA)

   AWS CLI(Protected by access keys)

   AWS SDK(for application development, protected by access keys)

Access keys are generated through the AWS console 

Users are reponsible for their own access keys.

Access keys are secret, just like password, Don't share them.

What is AWS CLI:

A tool that enables you to interact with AWS services using commands on the command-line shell.

With is CLI we can directly access to the public APIs of AWS services.

We can also develop our own scripts to mangage the resource and automate some task

It is open source












 